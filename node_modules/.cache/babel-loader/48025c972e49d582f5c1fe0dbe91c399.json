{"ast":null,"code":"var _jsxFileName = \"/Users/janliz/Desktop/employee-directory-react/edreact/src/components/PersonList.js\";\nimport React from \"react\";\nimport API from \"../utils/API\"; // using the API\n\nimport { Table } from 'reactstrap'; //Class -  setting state (data that I want to render)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class PersonList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      users: [],\n      //setting as an array. It's how we'll receive the data\n      // use this to display only users per name enter in the search box\n      usersToDisplay: [],\n      sort: \"asc\"\n    };\n\n    this.api = () => {\n      API.ramdomEmployees().then(res => {\n        this.setState({\n          users: res.data.results\n        }); // using setState to change USERS at the state level\n        // setting second API respond to display only search box input\n\n        this.setState({\n          usersToDisplay: res.data.results\n        });\n        console.log(res);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.api(); // this is calling axios.get from API.js and wil get data as soon componentDiMount loads. And runs one time\n  } //Using API to get data \n\n\n  //Filter by name when a name is enter. \n  // employeeFilterOnChange = (event) => {\n  //     console.log(\"input\", event.target);\n  //     // use .filter on the users state\n  //     // get only the employees that match the value the user has typed in\n  //     // set usersToDisplay state\n  //   };\n  //Rendering data\n  //this = reference to state\n  render() {\n    const users = this.state.users;\n    console.log('user', this.state.users);\n    const sorted = users.sort((a, b) => {\n      return a.user.first.name - bus;\n    }); //accessing array of data and displaying each employeey information\n\n    const usersMap = users.map((user, index) => {\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          scope: \"row\",\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: user.picture.thumbnail\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: `${user.name.first} ${user.name.last}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: user.gender\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: user.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this);\n    }); //Sorting by Name\n    // const usersFilter = usersToDisplay.map((user) => {\n    //     return(\n    //         <div>\n    //         <label htmlFor=\"search\"> Search by Name</label>\n    //         <input type=\"text\" value={this.usersToDisplay} onChange={this.employeeFilterOnChange}></input>\n    //         </div>\n    //     )\n    // })\n\n    return /*#__PURE__*/_jsxDEV(Table, {\n      striped: true,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            value: \"id\",\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            value: \"picture\",\n            children: \"Picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            value: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            value: \"gender\",\n            children: \"Gender\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            value: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: usersMap\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/janliz/Desktop/employee-directory-react/edreact/src/components/PersonList.js"],"names":["React","API","Table","PersonList","Component","state","users","usersToDisplay","sort","api","ramdomEmployees","then","res","setState","data","results","console","log","componentDidMount","render","sorted","a","b","user","first","name","bus","usersMap","map","index","picture","thumbnail","last","gender","email"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport API from \"../utils/API\"; // using the API\nimport { Table } from 'reactstrap';\n\n\n//Class -  setting state (data that I want to render)\nexport default class PersonList extends React.Component {\n    state = {\n        users: [], //setting as an array. It's how we'll receive the data\n\n        // use this to display only users per name enter in the search box\n        usersToDisplay:[],\n\n        sort:\"asc\"\n       \n    };\n\n\n    componentDidMount() {\n        this.api() // this is calling axios.get from API.js and wil get data as soon componentDiMount loads. And runs one time\n    }\n\n    //Using API to get data \n    api = () => {\n        API.ramdomEmployees().then(res => {\n            this.setState({ users: res.data.results });// using setState to change USERS at the state level\n\n            // setting second API respond to display only search box input\n            this.setState({usersToDisplay:res.data.results});\n            console.log(res);\n        })\n\n    }\n\n//Filter by name when a name is enter. \n// employeeFilterOnChange = (event) => {\n//     console.log(\"input\", event.target);\n//     // use .filter on the users state\n//     // get only the employees that match the value the user has typed in\n//     // set usersToDisplay state\n//   };\n\n    //Rendering data\n    //this = reference to state\n    render() {\n\n        const users = this.state.users;\n        console.log('user', this.state.users)\n\n        const sorted = users.sort((a,b)=>{\n            return a.user.first.name -bus\n\n        })\n        \n\n        //accessing array of data and displaying each employeey information\n\n        const usersMap = users.map((user, index) => {\n            return (\n                <tr key={index}>\n                    <th scope=\"row\">{index + 1}</th>\n                    <td>\n                        <img src={user.picture.thumbnail} />\n                    </td>\n                    <td>{`${user.name.first} ${user.name.last}`}</td>\n                    <td>{user.gender}</td>\n                    <td>{user.email}</td>\n                </tr>\n            )\n        })\n\n//Sorting by Name\n\n\n\n        // const usersFilter = usersToDisplay.map((user) => {\n        //     return(\n        //         <div>\n        //         <label htmlFor=\"search\"> Search by Name</label>\n        //         <input type=\"text\" value={this.usersToDisplay} onChange={this.employeeFilterOnChange}></input>\n        //         </div>\n        //     )\n        // })\n       \n        return (\n\n            <Table striped>\n                <thead>\n                    <tr>\n                        <th value = \"id\">ID</th>\n                        <th value = \"picture\">Picture</th>\n                        <th value = \"name\">Name</th>\n                        <th value = \"gender\">Gender</th>\n                        <th value = \"email\">Email</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {usersMap}\n                </tbody>\n            </Table>\n      \n\n        );\n\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}